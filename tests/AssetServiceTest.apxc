@isTest
private class AssetServiceTest {
	@isTest
    static void testReportLostDevice_assetNotFound(){
        //Chama função sem um ativo identificado
        Test.startTest();
        String result = AssetService.reportLostDevice('NonExistentAsset');
        Test.stopTest();
        
        //Verifica
		System.assertEquals('No device found.', result, 'Expected error message for non-existent asset');
    }
    
    @isTest
    static void testReportLostDevice_noInsuranceCoverage(){
     	Account testAccount = new Account(Name = 'Test Account1');
        insert testAccount;
        
        Contact testContact = new Contact(FirstName = 'Test2', LastName = 'Contact2', AccountId = testAccount.Id);
        insert testContact;
        
        //Ativo sem cobertura
        Asset testAsset  = new Asset(Name = 'Test Asset 2', AccountId = testAccount.Id, ContactId = testContact.Id, Asset_Identifier__c = 'Asset002', Status = 'Available');
        insert testAsset;
        
        //Chama função do teste
        Test.startTest();
        String result = AssetService.reportLostDevice(testAsset.Asset_Identifier__c);
        Test.stopTest();
        //Verifica
		System.assertEquals('No coverage. Asset status adjusted to Lost.', result, 'Expected message for no insurance coverage');
    }
    @isTest
    static void testReportLostDevice_claimAlreadyFiled(){
        Account testAccount = new Account(Name = 'Test Account2');
        insert testAccount;
        
        Contact testContact = new Contact(FirstName = 'Test3', LastName = 'Contact3', AccountId = testAccount.Id );
        insert testContact;
        
        //Ativo com cobertura e serviço
        Asset testAsset  = new Asset(Name = 'Test Asset 3', AccountId = testAccount.Id, ContactId = testContact.Id, Asset_Identifier__c = 'Asset003', Status = 'Available');
        insert testAsset;
        
        Insurance__c testInsurance = new Insurance__c(Asset__c = testAsset.Id, Coverage__c = 'Comprehensive', Active__c = true);
        insert testInsurance;
        
        //Chama função do teste
        Test.startTest();
        String result = AssetService.reportLostDevice(testAsset.Asset_Identifier__c);
        Test.stopTest();
        	List<Claim__c> claims = [SELECT Id,Name FROM Claim__c WHERE Insurance__c = :testInsurance.Id AND Type__c = 'Loss' LIMIT 1];
        //Verifica
		System.assertEquals(claims[0].Name, result, 'Expected message for already filed claim');
    }
}
